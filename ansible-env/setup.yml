- name: Install Elasticstack
  become: true
  hosts: all
  gather_facts: true
  handlers:
  - name: Restart service
    systemd:
      name: "{{ elastic_service }}"
      state: restarted
      enabled: true

  tasks:

    - name: Copy deb package
      copy:
        src: "{{ deb_package }}"
        dest: /tmp/
        mode: '0755'

    - name: Install deb package
      apt:
        deb: "/tmp/{{ deb_package }}"
      register: install_output
      notify: Restart service

    - name: Copy cfg for Kibana
      template:
        src: kibana.yml.j2
        dest: /etc/kibana/kibana.yml
      notify: Restart service
      when: inventory_hostname == 'kibana'

    - name: Save install output to file
      copy:
        content: "{{ install_output.stdout }}\n{{ install_output.stderr }}"
        dest: "/home/gaidar/install_output.log"
      when: install_output.changed

    - name: Display install output
      debug:
        msg: "{{ install_output.stdout_lines + install_output.stderr_lines }}"
      when: install_output.changed

    # - name: Get network settings
    #   set_fact:
    #     dante_ip: "{{ octet_1 }}.{{ octet_2 }}.\
    #                {{ ansible_default_ipv4.address.split('.')[2] }}.\
    #                {{ ansible_default_ipv4.address.split('.')[3] }}"
    #     vlan30_ip: "{{ ansible_default_ipv4.address.split('.')[0] }}.\
    #              30.{{ ansible_default_ipv4.address.split('.')[2] }}.\
    #                 {{ ansible_default_ipv4.address.split('.')[3] }}"
    #     vlan2_ip: "{{ ansible_default_ipv4.address.split('.')[0] }}.\
    #              2.{{ ansible_default_ipv4.address.split('.')[2] }}.\
    #                 {{ ansible_default_ipv4.address.split('.')[3] }}"

    # - name: Copy netplan config
    #   template:
    #     src: "{{ item.src }}"
    #     dest: /etc/netplan/00-installer-config.yaml
    #     mode: '0644'
    #   notify: Apply Netplan configuration
    #   when: inventory_hostname in groups[item.group]
    #   with_items:
    #     - {src: './template/00-installer-config.yaml.j2', group: 'tap'}
    #     - {src: './template/00-installer-config.yaml.gers.j2', group: 'gers'}
    #   notify: Reboot host

    # - name: Copy aes config
    #   template:
    #     src: ./template/daemon.conf.j2
    #     dest: /etc/aes67-daemon/daemon.conf
    #     mode: '0755'
    #   notify: Reboot host

    # - name: Copy aes sound source
    #   template:
    #     src: ./template/status.json.j2
    #     dest: /var/lib/aes67-daemon/status.json
    #     mode: '0755'
    #     owner: aes67-daemon
    #     group: aes67-daemon
    #   when: inventory_hostname in groups['tap']

    # - name: Copy aes-restart service
    #   template:
    #     src: ./template/sysstart_aes67.service.j2
    #     dest: /etc/systemd/system/sysstart_aes67.service
    #     mode: '0644'
    #   notify: Restart sysstart_aes67 service
    # - name: Flush handlers
    #   meta: flush_handlers

    # - name: Copy aes-restart script
    #   template:
    #     src: ./template/run_aes67.sh.j2
    #     dest: /usr/local/run_aes67.sh
    #     mode: '0755'

    # - name: Configure pulse
    #   replace:
    #     path: /etc/pulse/daemon.conf
    #     regexp: '{{ item.old }}'
    #     replace: '{{ item.new }}'
    #   with_items:
    #     - {old: '; default-sample-rate = 44100', new: 'default-sample-rate = 48000'}
    #     #- {old: '; alternate-sample-rate = 48000', new: 'alternate-sample-rate = 44100'}
    #   notify: Reboot host - wait 180 sec

    # - name: Make overrigde directory
    #   file:
    #     path: /etc/systemd/system/{{ service_name }}.service.d
    #     state: directory
    #     mode: '0755'

    # - name: Create the override configuration
    #   template:
    #     src: ./template/override.conf.j2
    #     dest: /etc/systemd/system/{{ service_name }}.service.d/override.conf
    #     mode: '0755'
    #   notify: Restart Lyra service

    # - name: Set sysctl parameters
    #   sysctl:
    #     name: "{{ item.name }}"
    #     value: "{{ item.value }}"
    #     reload: true
    #   when: inventory_hostname in groups[item.group]
    #   with_items:
    #     - {name: 'kernel.sched_rt_runtime_us', value: '1000000', group: 'tap'}
    #     - {name: 'kernel.perf_cpu_time_max_percent', value: '0', group: 'tap'}
    #     - {name: 'net.core.wmem_max', value: '12582912', group: 'gers'}
    #     - {name: 'net.core.rmem_max', value: '12582912', group: 'gers'}
    #     - {name: 'net.ipv4.tcp_rmem', value: '10240 87380 12582912', group: 'gers'}
    #     - {name: 'net.ipv4.tcp_wmem', value: '10240 87380 12582912', group: 'gers'}
    #     - {name: 'net.ipv4.tcp_window_scaling', value: '1', group: 'gers'}
    #     - {name: 'net.ipv4.tcp_timestamps', value: '1', group: 'gers'}
    #     - {name: 'net.core.netdev_max_backlog', value: '5000', group: 'gers'}
    #   notify: Reboot host
